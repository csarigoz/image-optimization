name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract tag version
        id: tag_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog content
        id: changelog
        run: |
          VERSION="${{ steps.tag_version.outputs.VERSION }}"
          echo "Extracting changelog for version: $VERSION"
          
          # Extract the specific version content from CHANGELOG.md
          # Look for the version header and extract content until the next version header
          awk "/^## \[.*$VERSION.*\]/{flag=1; next} /^## \[/{if(flag) exit} flag && /^### |^- |^[A-Z]/ {print}" CHANGELOG.md > release_notes.md
          
          # If no specific content found, use a generic message
          if [ ! -s release_notes.md ]; then
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed release notes." >> release_notes.md
          fi
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create Release Archive
        run: |
          # Create a clean archive without sensitive files
          mkdir -p release-archive
          
          # Copy core files
          cp *.py release-archive/ 2>/dev/null || true
          cp *.sh release-archive/ 2>/dev/null || true
          cp *.txt release-archive/ 2>/dev/null || true
          cp *.md release-archive/ 2>/dev/null || true
          cp LICENSE release-archive/ 2>/dev/null || true
          cp .env.example release-archive/ 2>/dev/null || true
          
          # Copy data directory structure
          cp -r data release-archive/ 2>/dev/null || mkdir -p release-archive/data
          
          # Create archive
          cd release-archive
          tar -czf ../cloudfront-image-utility-${{ steps.tag_version.outputs.VERSION }}.tar.gz .
          cd ..
          
          # Create zip for Windows users
          cd release-archive
          zip -r ../cloudfront-image-utility-${{ steps.tag_version.outputs.VERSION }}.zip .
          cd ..

      - name: Validate release
        run: |
          echo "üîç Validating release archive..."
          
          # Extract and test the archive
          mkdir test-release
          cd test-release
          tar -xzf ../cloudfront-image-utility-${{ steps.tag_version.outputs.VERSION }}.tar.gz
          
          # Check core files exist
          required_files=("upload_files.py" "alttext_ai.py" "setup.py" "requirements.txt" "README.md" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists in release"
            else
              echo "‚ùå $file missing from release"
              exit 1
            fi
          done
          
          # Test Python imports
          python -c "import upload_files; print('‚úÖ upload_files imports successfully')"
          python -c "import alttext_ai; print('‚úÖ alttext_ai imports successfully')"
          
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_version.outputs.VERSION }}
          name: Release ${{ steps.tag_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            cloudfront-image-utility-${{ steps.tag_version.outputs.VERSION }}.tar.gz
            cloudfront-image-utility-${{ steps.tag_version.outputs.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Notify about release
        run: |
          echo "üéâ Release ${{ github.ref_name }} has been created!"
          echo "üì¶ Archives have been uploaded to the release"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" 